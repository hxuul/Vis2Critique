{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {
    "url": "https://raw.githubusercontent.com/hxuul/FIT3179-VIS-2/refs/heads/main/map2/updated_combined_data.csv"
  },
  "params": [{
    "name": "zoom_level",
    "value": 225,
    "bind": {
      "input": "range",
      "min": 100,
      "max": 400,
      "step": 5,
      "name": "Zoom: "
    }
  }],
  "vconcat": [
    {
      "_comment": "this is the world map section",
      "width": 1500,
      "height": 500,
      "title": "Global Distribution of Social Service Payments per 10,000 Population",
      "projection": { "type": "equirectangular", 
                      "rotate": [-80, 0, 0],
                      "scale": {"expr": "zoom_level"},
                      "center": [0, 80]
                    },
      "layer": [
        

        {
          "_comment": "Layer for oceans",
          "data": {
            "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/7_others/oceans.topojson",
            "format": { "type": "topojson", "feature": "oceans" }
          },
          "mark": { "type": "geoshape", "fill": "skyblue" }
        },

        {
          "_comment": "Layer for graticules",
          "data": {
            "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/2_symbol_map/js/WorldMapWithGraticules.topojson",
            "format": { "type": "topojson", "feature": "ne_110m_graticules_30" }
          },
          "mark": { "type": "geoshape", "fill": null, "stroke": "lightgray" }
        },
        {
          "_comment": "Layer for countries",
          "data": {
            "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/2_symbol_map/js/ne_110m_admin_0_countries.topojson",
            "format": {
              "type": "topojson",
              "feature": "ne_110m_admin_0_countries"
            }
          },
          "transform": [
            {
              "calculate": "'Data Not Available ' + datum.properties.NAME",
              "as": "note"
            }
          ],
          "mark": {
            "type": "geoshape",
            "fill": "lightgray",
            "strokeWidth": 0.6
          },
          "encoding": {
            "tooltip": {
              "field": "note"
            }
          }
        },

        {
          "_comment": "Layer for actual countries colors",
          "data": {
            "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/2_symbol_map/js/ne_110m_admin_0_countries.topojson",
            "format": {
              "type": "topojson",
              "feature": "ne_110m_admin_0_countries"
            }
          },
          "params": [
            {
              "name": "country_selection",
              "select": {
                "type": "point",
                "on": "click"
              }
            }
          ],
          "transform": [
            {
              "lookup": "properties.NAME",
              "from": {
                "data": {
                  "url": "https://raw.githubusercontent.com/hxuul/FIT3179-VIS-2/refs/heads/main/map2/updated_combined_data.csv",
                  "format": {
                    "type": "csv"
                  }
                },
                "key": "Country of Birth",
                "fields": [
                  "Country of Birth",
                  "ABSTUDY (Living allowance)",
                  "ABSTUDY (Non-living allowance)",
                  "Age Pension",
                  "Austudy",
                  "Carer Allowance",
                  "Carer Allowance (Child Health Care Card only)",
                  "Carer Payment",
                  "Commonwealth Rent Assistance",
                  "Commonwealth Seniors Health Card",
                  "Disability Support Pension",
                  "Family Tax Benefit A",
                  "Family Tax Benefit B",
                  "Health Care Card",
                  "JobSeeker Payment",
                  "Low Income Card",
                  "Parenting Payment Partnered",
                  "Parenting Payment Single",
                  "Pension Concession Card",
                  "Special Benefit",
                  "Youth Allowance (other)",
                  "Youth Allowance (student and apprentice)",
                  "population"

                ]
              }
            },
            {
              "calculate": "(parseFloat(datum['ABSTUDY (Living allowance)']) + parseFloat(datum['ABSTUDY (Non-living allowance)']) + parseFloat(datum['Age Pension']) + parseFloat(datum['Austudy']) + parseFloat(datum['Carer Allowance']) + parseFloat(datum['Carer Allowance (Child Health Care Card only)']) + parseFloat(datum['Carer Payment']) + parseFloat(datum['Commonwealth Rent Assistance']) + parseFloat(datum['Commonwealth Seniors Health Card']) + parseFloat(datum['Disability Support Pension']) + parseFloat(datum['Family Tax Benefit A']) + parseFloat(datum['Family Tax Benefit B']) + parseFloat(datum['Health Care Card']) + parseFloat(datum['JobSeeker Payment']) + parseFloat(datum['Low Income Card']) + parseFloat(datum['Parenting Payment Partnered']) + parseFloat(datum['Parenting Payment Single']) + parseFloat(datum['Pension Concession Card']) + parseFloat(datum['Special Benefit']) + parseFloat(datum['Youth Allowance (other)']) + parseFloat(datum['Youth Allowance (student and apprentice)']))",
              "as": "Total Count"
            },
            {
              "calculate": "(parseFloat(datum['ABSTUDY (Living allowance)']) + parseFloat(datum['ABSTUDY (Non-living allowance)']) + parseFloat(datum['Age Pension']) + parseFloat(datum['Austudy']) + parseFloat(datum['Carer Allowance']) + parseFloat(datum['Carer Allowance (Child Health Care Card only)']) + parseFloat(datum['Carer Payment']) + parseFloat(datum['Commonwealth Rent Assistance']) + parseFloat(datum['Commonwealth Seniors Health Card']) + parseFloat(datum['Disability Support Pension']) + parseFloat(datum['Family Tax Benefit A']) + parseFloat(datum['Family Tax Benefit B']) + parseFloat(datum['Health Care Card']) + parseFloat(datum['JobSeeker Payment']) + parseFloat(datum['Low Income Card']) + parseFloat(datum['Parenting Payment Partnered']) + parseFloat(datum['Parenting Payment Single']) + parseFloat(datum['Pension Concession Card']) + parseFloat(datum['Special Benefit']) + parseFloat(datum['Youth Allowance (other)']) + parseFloat(datum['Youth Allowance (student and apprentice)']))/parseFloat(datum['population']) * 10000",
              "as": "Count per 10,000 population"
            },

            {
              "calculate": "country_selection",
              "as": "Selected Country"
            }
          ],
          "mark": { "type": "geoshape"},
          "encoding": {
            "opacity": {
              "condition": {
                "param": "country_selection",
                "value": 1,
                "empty": false
              },
              "value": 0.6
            },
            "strokeWidth": {
              "condition": {
                "param": "country_selection",
                "value": 1,
                "empty": false
              },
              "value": 0.6
            },
            "stroke":{
              "condition": {
                "param": "country_selection",
                "value": "black",
                "empty": false
              },
              "value": "white"
            },
            "color": {
              "field": "Count per 10,000 population",
              "type": "quantitative",
              "title": "Count per 10,000 population",
              "scale": {
                "type": "log",
                "domain": [1, 10, 100, 1000, 10000, 100000],
                "range": ["#fdbe85", "#fd8d3c", "#e6550d", "#bd0026", "#7f0000"]
              }
            },
            "tooltip": [
              {
                "field": "properties.NAME",
                "type": "nominal",
                "title": "Country Name "
              },
              
              {
                "field": "Count per 10,000 population",
                "type": "nominal",
                "title": "Count per 10,000 population",
                "format": ".2f"
              },

              {
                "field": "Total Count",
                "type": "quantitative",
                "title": "Total Count"
              }
            ]
          },
          "_comment_annotation": "Layer for annotation text"
          
        },
        {
          "_comment_annotation": "New annotation layer for Australia",
          "data": {
            "values": [
              {
                "longitude": 133.775136,
                "latitude": -25.274398,
                "text_annotation": "Australia has the highest count per 10,000 population"
              }
            ]
          },
          "mark": {
            "type": "text",
            "align": "left",
            "dx": 60,
            "dy": -10,
            "fontStyle": "italic",
            "fontSize": 12,
            "fontWeight": "bold"
          },
          "encoding": {
            "longitude": { "field": "longitude", "type": "quantitative" },
            "latitude": { "field": "latitude", "type": "quantitative" },
            "text": { "field": "text_annotation" }
          }
        },
        


        {
          "_comment": "Text for countries",
          "data": {
            "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/2_symbol_map/js/ne_110m_admin_0_countries.topojson",
            "format": {
              "type": "topojson",
              "feature": "ne_110m_admin_0_countries"
            }
          },
          
          "transform": [
            {
              "lookup": "properties.NAME",
              "from": {
                "data": {
                  "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/3_choropleth_map/data/countryInfo.csv"
                },
                "key": "name",
                "fields": ["latitude", "longitude"]
              }
            }
          ],
          "mark": { 
            "type": "text",
            "fontWeight": "bold",
            "fontSize": 14
          },
          "encoding": {
            "longitude": {"field": "longitude", "type": "quantitative"},
            "latitude": {"field": "latitude", "type": "quantitative"},
            "text": {"field": "properties.NAME", "type": "nominal"},
            "opacity": {
              "condition": {
                "param": "country_selection",
                "value": 1,
                "empty": false
              },
              "value": 0
            }
          }
        }
      ]
    },

    {
      
      "width": 1500,
      "height": 100,
      "title": "Breakdown of Social Service Payments by Benefit Type for Selected Country",
      "data": {
        "url": "https://raw.githubusercontent.com/FIT3179/Vega-Lite/main/2_symbol_map/js/ne_110m_admin_0_countries.topojson",
        "format": {
          "type": "topojson",
          "feature": "ne_110m_admin_0_countries"
        }
      },
      "transform": [
        {
          "lookup": "properties.NAME",
          "from": {
            "data": {
              "url": "https://raw.githubusercontent.com/hxuul/FIT3179-VIS-2/refs/heads/main/map2/map2.csv",
              "format": {
                "type": "csv"
              }
            },
            "key": "Country of Birth",
            "fields": [
              "ABSTUDY (Living allowance)",
              "ABSTUDY (Non-living allowance)",
              "Age Pension",
              "Austudy",
              "Carer Allowance",
              "Carer Allowance (Child Health Care Card only)",
              "Carer Payment",
              "Commonwealth Rent Assistance",
              "Commonwealth Seniors Health Card",
              "Disability Support Pension",
              "Family Tax Benefit A",
              "Family Tax Benefit B",
              "Health Care Card",
              "JobSeeker Payment",
              "Low Income Card",
              "Parenting Payment Partnered",
              "Parenting Payment Single",
              "Pension Concession Card",
              "Special Benefit",
              "Youth Allowance (other)",
              "Youth Allowance (student and apprentice)"
            ]
          }
        },

        {
          "filter": { "param": "country_selection", "empty": false }
        },
        {
          "fold": [
            "ABSTUDY (Living allowance)",
            "ABSTUDY (Non-living allowance)",
            "Age Pension",
            "Austudy",
            "Carer Allowance",
            "Carer Allowance (Child Health Care Card only)",
            "Carer Payment",
            "Commonwealth Rent Assistance",
            "Commonwealth Seniors Health Card",
            "Disability Support Pension",
            "Family Tax Benefit A",
            "Family Tax Benefit B",
            "Health Care Card",
            "JobSeeker Payment",
            "Low Income Card",
            "Parenting Payment Partnered",
            "Parenting Payment Single",
            "Pension Concession Card",
            "Special Benefit",
            "Youth Allowance (other)",
            "Youth Allowance (student and apprentice)"
          ],
          "as": ["Payment Type", "Total Count"]
        }
      ],
      "mark": "bar",
      "encoding": {
        "x": {
          "field": "Payment Type",
          "type": "nominal",
          "title": "Payment Type",
          "axis": { "labelAngle": -45 },
          "sort": "-y"
        },
        "y": {
          "aggregate": "sum",
          "field": "Total Count",
          "type": "quantitative",
          "title": "Total Count"
        },
        "tooltip": [
          {
            "field": "Payment Type",
            "type": "nominal",
            "title": "Payment Type"
          },
          {
            "field": "Total Count",
            "type": "quantitative",
            "title": "Total Count"
          }
        ]
      }
    }
  ],
  "config": { "title": { "font": "sans-serif", "fontSize": 16 },
              "axis": {"labelFontSize": 9,"titleFontSize": 15},
              "padding": {
              "left": 100,
              "right": 20,
              "top": 50,
              "bottom": 150
              }
            }
}